<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>5.2</version>
    <date>2020-08-16T18:45:05Z</date>
    <media_types>
        <media_type>
            <name>Opsgenie</name>
            <type>WEBHOOK</type>
            <parameters>
                <parameter>
                    <name>alert_message</name>
                    <value>{ALERT.MESSAGE}</value>
                </parameter>
                <parameter>
                    <name>alert_subject</name>
                    <value>{ALERT.SUBJECT}</value>
                </parameter>
                <parameter>
                    <name>event_id</name>
                    <value>{EVENT.ID}</value>
                </parameter>
                <parameter>
                    <name>event_nseverity</name>
                    <value>{EVENT.NSEVERITY}</value>
                </parameter>
                <parameter>
                    <name>event_source</name>
                    <value>{EVENT.SOURCE}</value>
                </parameter>
                <parameter>
                    <name>event_tags_json</name>
                    <value>{EVENT.TAGSJSON}</value>
                </parameter>
                <parameter>
                    <name>event_update_status</name>
                    <value>{EVENT.UPDATE.STATUS}</value>
                </parameter>
                <parameter>
                    <name>event_value</name>
                    <value>{EVENT.VALUE}</value>
                </parameter>
                <parameter>
                    <name>opsgenie_api</name>
                    <value>&lt;put your opsgenie api&gt;</value>
                </parameter>
                <parameter>
                    <name>opsgenie_tags</name>
                    <value/>
                </parameter>
                <parameter>
                    <name>opsgenie_teams</name>
                    <value/>
                </parameter>
                <parameter>
                    <name>opsgenie_token</name>
                    <value>&lt;put your token&gt;</value>
                </parameter>
                <parameter>
                    <name>opsgenie_web</name>
                    <value>&lt;put your opsgenie web&gt;</value>
                </parameter>
                <parameter>
                    <name>severity_average</name>
                    <value>P3</value>
                </parameter>
                <parameter>
                    <name>severity_default</name>
                    <value>P5</value>
                </parameter>
                <parameter>
                    <name>severity_disaster</name>
                    <value>P1</value>
                </parameter>
                <parameter>
                    <name>severity_high</name>
                    <value>P2</value>
                </parameter>
                <parameter>
                    <name>severity_information</name>
                    <value>P5</value>
                </parameter>
                <parameter>
                    <name>severity_not_classified</name>
                    <value>P5</value>
                </parameter>
                <parameter>
                    <name>severity_warning</name>
                    <value>P4</value>
                </parameter>
                <parameter>
                    <name>trigger_id</name>
                    <value>{TRIGGER.ID}</value>
                </parameter>
                <parameter>
                    <name>zbxurl</name>
                    <value>{$ZABBIX.URL}</value>
                </parameter>
                <parameter>
                    <name>zbxuser</name>
                    <value>{USER.FULLNAME}</value>
                </parameter>
            </parameters>
            <script>var Media = {
    params: {},
    name: '',
    labels: [],
    HTTPProxy: '',

    setParams: function (params) {
        if (typeof params !== 'object') {
            return;
        }

        Media.params = params;
        Media.params.api += Media.params.api.endsWith('/') ? '' : '/';
        Media.params.web += Media.params.web.endsWith('/') ? '' : '/';
    },

    setProxy: function (HTTPProxy) {
        if (typeof HTTPProxy !== 'undefined' &amp;&amp; HTTPProxy.trim() !== '') {
            Media.HTTPProxy = HTTPProxy;
        }
    },

    setTags: function(event_tags_json) {
        if (typeof event_tags_json !== 'undefined' &amp;&amp; event_tags_json !== ''
                &amp;&amp; event_tags_json !== '{EVENT.TAGSJSON}') {

            try {
                var tags = JSON.parse(event_tags_json),
                    label;

                tags.forEach(function (tag) {
                    if (typeof tag.tag === 'string') {
                        label = (tag.tag + (typeof tag.value !== 'undefined'
                                &amp;&amp; tag.value !== '' ? (':' + tag.value) : '')).replace(/\s/g, '_');
                        Media.labels.push(label);
                    }
                });
            }
            catch (error) {
                Zabbix.Log(4, '[ ' + Media.name + ' Webhook ] Failed to parse &quot;event_tags_json&quot; param');
            }
        }
    },

    request: function (method, query, data) {
        ['api', 'token'].forEach(function (field) {
            if (typeof Media.params !== 'object' || typeof Media.params[field] === 'undefined'
                    || Media.params[field] === '') {
                throw 'Required ' + Media.name + ' param is not set: &quot;' + field + '&quot;.';
            }
        });

        var response,
            url = Media.params.api + query,
            request = new CurlHttpRequest();

        request.AddHeader('Content-Type: application/json');
        request.AddHeader('Authorization: ' + Media.params.token);
        request.SetProxy(Media.HTTPProxy);

        if (typeof data !== 'undefined') {
            data = JSON.stringify(data);
        }

        Zabbix.Log(4, '[ ' + Media.name + ' Webhook ] Sending request: ' +
            url + ((typeof data === 'string') ? ('\n' + data) : ''));

        switch (method) {
            case 'get':
                response = request.Get(url, data);
                break;

            case 'post':
                response = request.Post(url, data);
                break;

            case 'put':
                response = request.Put(url, data);
                break;

            default:
                throw 'Unsupported HTTP request method: ' + method;
        }

        Zabbix.Log(4, '[ ' + Media.name + ' Webhook ] Received response with status code ' +
            request.Status() + '\n' + response);

        if (response !== null) {
            try {
                response = JSON.parse(response);
            }
            catch (error) {
                Zabbix.Log(4, '[ ' + Media.name + ' Webhook ] Failed to parse response.');
                response = null;
            }
        }

        if (request.Status() &lt; 200 || request.Status() &gt;= 300) {
            var message = 'Request failed with status code ' + request.Status();

            if (response !== null) {
                if (typeof response.errors === 'object' &amp;&amp; Object.keys(response.errors).length &gt; 0) {
                    message += ': ' + JSON.stringify(response.errors);
                }
                else if (typeof response.errorMessages === 'object' &amp;&amp; Object.keys(response.errorMessages).length &gt; 0) {
                    message += ': ' + JSON.stringify(response.errorMessages);
                }
                else if (typeof response.message === 'string') {
                    message += ': ' + response.message;
                }
            }

            throw message + ' Check debug log for more information.';
        }

        return {
            status: request.Status(),
            response: response
        };
    }
};

try {
    var result = {tags: {}},
        params = JSON.parse(value),
        media = {},
        fields = {},
        resp = {},
        responders = [],
        tags = [],
        required_params = [
            'alert_subject',
            'alert_message',
            'event_id',
            'event_source',
            'event_value',
            'event_update_status',
            'opsgenie_api',
            'opsgenie_web',
            'opsgenie_token'
        ],
        severities = [
            'not_classified',
            'information',
            'warning',
            'average',
            'high',
            'disaster',
            'resolved',
            'default'
        ],
        priority;

    Object.keys(params)
        .forEach(function (key) {
            if (required_params.indexOf(key) !== -1 &amp;&amp; params[key].trim() === '') {
                throw 'Parameter &quot;' + key + '&quot; cannot be empty.';
            }
            if (key.startsWith('opsgenie_')) {
                media[key.substring(9)] = params[key];
            }
        });

    // Possible values of event_source:
    // 0 - Trigger, 1 - Discovery, 2 - Autoregistration, 3 - Internal.
    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {
        throw 'Incorrect &quot;event_source&quot; parameter given: &quot;' + params.event_source + '&quot;.\nMust be 0-3.';
    }

    // Check event_value for trigger-based and internal events.
    // Possible values: 1 for problem, 0 for recovering
    if (params.event_value !== '0' &amp;&amp; params.event_value !== '1'
        &amp;&amp; (params.event_source === '0' || params.event_source === '3')) {
        throw 'Incorrect &quot;event_value&quot; parameter given: ' + params.event_value + '\nMust be 0 or 1.';
    }

    // Check event_update_status only for trigger-based events.
    // Possible values: 0 - Webhook was called because of problem/recovery event, 1 - Update operation.
    if (params.event_source === '0' &amp;&amp; params.event_update_status !== '0' &amp;&amp; params.event_update_status !== '1') {
        throw 'Incorrect &quot;event_update_status&quot; parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';
    }

    // Check event_id for a numeric value.
    if (isNaN(parseInt(params.event_id)) || params.event_id &lt; 1) {
        throw 'Incorrect &quot;event_id&quot; parameter given: ' + params.event_id + '\nMust be a positive number.';
    }

    if ((params.event_source === '1' || params.event_source === '2')  &amp;&amp; params.event_value === '0') {
        throw 'Recovery operations are supported only for Trigger and Internal actions.';
    }

    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {
        params.event_nseverity = '7';
    }

    if (params.event_value === '0') {
        params.event_nseverity = '6';
    }

    priority = params['severity_' + severities[params.event_nseverity]];
    params.zbxurl = params.zbxurl + (params.zbxurl.endsWith('/') ? '' : '/');

    Media.name = 'Opsgenie';
    Media.setParams(media);
    Media.params.token = 'GenieKey ' + Media.params.token;
    Media.setProxy(params.HTTPProxy);
    Media.setTags(params.event_tags_json); // Set Media.labels

    // Create an issue.
    // Numeric value of the event that triggered an action (1 for problem, 0 for recovering).
    // Numeric value of of the problem update status. Possible values:
    // 0 - Webhook was called because of problem/recovery event, 1 - Update operation.
    if ((params.event_source == 0 &amp;&amp; params.event_value == 1 &amp;&amp; params.event_update_status == 0)
        || (params.event_source == 3 &amp;&amp; params.event_value == 1)
        || params.event_source == 1 || params.event_source == 2) {
        fields.message = params.alert_subject;
        fields.alias = params.event_id;
        fields.description = params.alert_message;
        fields.priority = priority;
        fields.source = 'Zabbix';

        if (params.event_source === '0') {
            fields.details = {
                'Zabbix server': params.zbxurl,
                Problem: params.zbxurl + 'tr_events.php?triggerid=' + params.trigger_id + '&amp;eventid=' + params.event_id
            };
        }
        else {
            fields.details = {'Zabbix server': params.zbxurl};
        }

        if (typeof params.opsgenie_teams === 'string') {
            responders = params.opsgenie_teams.split(',');
            fields.responders = responders.map(function(team) {
                return {type: 'team', name: team.trim()};
            });
        }

        fields.tags = Media.labels;
        if (typeof params.opsgenie_tags === 'string') {
            tags = params.opsgenie_tags.split(',');
            tags.forEach(function(item) {
                fields.tags.push(item.trim());
            });
        }

        resp = Media.request('post', '', fields);
        if (typeof resp.response !== 'object' || typeof resp.response.result === 'undefined') {
            throw 'Cannot create ' + Media.name + ' issue. Check debug log for more information.';
        }

        do {
            resp = Media.request('get', 'requests/' + resp.response.requestId);
        }
        while (typeof resp.response !== 'object' || typeof resp.response.data === 'undefined'
            || resp.response.data.success === false);

        if (typeof resp.response !== 'object' || typeof resp.response.data === 'undefined') {
            throw 'Cannot get ' + Media.name + ' issue ID. Check debug log for more information.';
        }

        if (params.event_source == 0 &amp;&amp; params.event_value == 1 &amp;&amp; params.event_update_status == 0) {
            result.tags.__zbx_ops_issuekey = resp.response.data.alertId;
            result.tags.__zbx_ops_issuelink = Media.params.web + 'alert/detail/' + resp.response.data.alertId;
        }
    }
    // Update a created issue.
    else {
        fields.user = (params.event_value != 0) ? params.zbxuser : '';
        fields.note = params.alert_message;

        resp = Media.request('post', params.event_id + '/notes?identifierType=alias', fields);
        if (typeof resp.response !== 'object' || typeof resp.response.result === 'undefined') {
            throw 'Cannot update ' + Media.name + ' issue. Check debug log for more information.';
        }
    }

    return JSON.stringify(result);
}
catch (error) {
    Zabbix.Log(3, '[ ' + Media.name + ' Webhook ] ERROR: ' + error);
    throw 'Sending failed: ' + error;
}</script>
            <process_tags>YES</process_tags>
            <show_event_menu>YES</show_event_menu>
            <event_menu_url>{EVENT.TAGS.__zbx_ops_issuelink}</event_menu_url>
            <event_menu_name>Opsgenie: {EVENT.TAGS.__zbx_ops_issuekey}</event_menu_name>
            <description>Please refer to https://docs.opsgenie.com/docs/alert-api and https://www.zabbix.com/documentation/current/manual/config/notifications/media/webhook#example_scripts.
  
Set global macro {$ZABBIX.URL} with your Zabbix server URL.
Add dedicated user with media type &quot;Opsgenie&quot;.
Change the values of the variables opsgenie_api (https://api.opsgenie.com/v2/alerts or https://api.eu.opsgenie.com/v2/alerts),
opsgenie_web (for example, https://myzabbix.app.opsgenie.com), opsgenie_token.</description>
            <message_templates>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Problem: {EVENT.NAME}</subject>
                    <message>Problem started at {EVENT.TIME} on {EVENT.DATE}
Problem name: {EVENT.NAME}
Host: {HOST.NAME}
Severity: {EVENT.SEVERITY}
Operational data: {EVENT.OPDATA}
Original problem ID: {EVENT.ID}
{TRIGGER.URL}
{EVENT.TAGS}
{EVENT.TAGSJSON}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>UPDATE</operation_mode>
                    <subject>Updated problem in {EVENT.AGE}: {EVENT.NAME}</subject>
                    <message>{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.
{EVENT.UPDATE.MESSAGE}

Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.</message>
                </message_template>
                <message_template>
                    <event_source>DISCOVERY</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}</subject>
                    <message>Discovery rule: {DISCOVERY.RULE.NAME}

Device IP: {DISCOVERY.DEVICE.IPADDRESS}
Device DNS: {DISCOVERY.DEVICE.DNS}
Device status: {DISCOVERY.DEVICE.STATUS}
Device uptime: {DISCOVERY.DEVICE.UPTIME}

Device service name: {DISCOVERY.SERVICE.NAME}
Device service port: {DISCOVERY.SERVICE.PORT}
Device service status: {DISCOVERY.SERVICE.STATUS}
Device service uptime: {DISCOVERY.SERVICE.UPTIME}</message>
                </message_template>
                <message_template>
                    <event_source>AUTOREGISTRATION</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Autoregistration: {HOST.HOST}</subject>
                    <message>Host name: {HOST.HOST}
Host IP: {HOST.IP}
Agent port: {HOST.PORT}</message>
                </message_template>
                <message_template>
                    <event_source>INTERNAL</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Internal problem: {EVENT.NAME}</subject>
                    <message>Internal problem started at {EVENT.TIME} on {EVENT.DATE}
Problem name: {EVENT.NAME}
Host: {HOST.NAME}
Operational data: {EVENT.OPDATA}
Original problem ID: {EVENT.ID}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>RECOVERY</operation_mode>
                    <subject>Resolved in {EVENT.DURATION}: {EVENT.NAME}</subject>
                    <message>Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}
Problem name: {EVENT.NAME}
Problem duration: {EVENT.DURATION}
Host: {HOST.NAME}
Severity: {EVENT.SEVERITY}
Original problem ID: {EVENT.ID}
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>INTERNAL</event_source>
                    <operation_mode>RECOVERY</operation_mode>
                    <subject>Internal problem: {EVENT.NAME}</subject>
                    <message>Internal problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}
Problem name: {EVENT.NAME}
Host: {HOST.NAME}
Operational data: {EVENT.OPDATA}
Original problem ID: {EVENT.ID}</message>
                </message_template>
            </message_templates>
        </media_type>
    </media_types>
</zabbix_export>
