<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>5.0</version>
    <date>2021-03-02T08:05:26Z</date>
    <media_types>
        <media_type>
            <name>Brevis.one</name>
            <type>WEBHOOK</type>
            <parameters>
                <parameter>
                    <name>endpoint</name>
                    <value>&lt;PALCE HTTP API URL&gt;</value>
                </parameter>
                <parameter>
                    <name>flash</name>
                    <value>false</value>
                </parameter>
                <parameter>
                    <name>password</name>
                    <value>&lt;PLACE PASSWORD&gt;</value>
                </parameter>
                <parameter>
                    <name>ring</name>
                    <value>false</value>
                </parameter>
                <parameter>
                    <name>send_to</name>
                    <value>{ALERT.SENDTO}</value>
                </parameter>
                <parameter>
                    <name>telauto</name>
                    <value>true</value>
                </parameter>
                <parameter>
                    <name>text</name>
                    <value>{ALERT.MESSAGE}</value>
                </parameter>
                <parameter>
                    <name>username</name>
                    <value>{PLACE USERNAME}</value>
                </parameter>
            </parameters>
            <script>var BrevisOne = {&#13;
    addParam: function (prefix, name, value) {&#13;
        return prefix + name + '=' + encodeURIComponent(value);&#13;
    },&#13;
&#13;
    setFields: function (data) {&#13;
        if (params.send_to.trim() &amp;&amp; params.send_to !== '{ALERT.SENDTO}') {&#13;
            var parts = params.send_to.split(':');&#13;
&#13;
            if (parts.length &gt; 1) {&#13;
                data += BrevisOne.addParam('&amp;', 'mode', parts[0]);&#13;
                data += BrevisOne.addParam('&amp;', 'to', parts[1]);&#13;
            }&#13;
            else {&#13;
                data += BrevisOne.addParam('&amp;', 'to', parts[0]);&#13;
            }&#13;
        }&#13;
        else {&#13;
            throw 'Required parameter is not set: &quot;send_to&quot;.';&#13;
        }&#13;
&#13;
        if (params.ring &amp;&amp; params.ring.trim() &amp;&amp; params.ring.toLowerCase() === 'true') {&#13;
            data += BrevisOne.addParam('&amp;', 'ring', 'true');&#13;
        }&#13;
&#13;
        if (params.flash &amp;&amp; params.flash.trim() &amp;&amp; params.flash.toLowerCase() === 'true') {&#13;
            data += BrevisOne.addParam('&amp;', 'flash', 'true');&#13;
        }&#13;
&#13;
        if (params.telauto &amp;&amp; params.telauto.trim() &amp;&amp; params.telauto.toLowerCase() === 'false') {&#13;
            data += BrevisOne.addParam('&amp;', 'telauto', 'false');&#13;
        }&#13;
&#13;
        return data;&#13;
    },&#13;
&#13;
    request: function (data) {&#13;
        var response,&#13;
            request = new CurlHttpRequest();&#13;
&#13;
        request.AddHeader('Content-Type: multipart/form-data');&#13;
&#13;
        if (typeof params.HTTPProxy !== 'undefined' &amp;&amp; params.HTTPProxy !== '') {&#13;
            request.SetProxy(params.HTTPProxy);&#13;
        }&#13;
&#13;
        Zabbix.Log(4, '[ BrevisOne Webhook ] Sending request: ' + params.endpoint +&#13;
            ((typeof data === 'string') ? (data) : ''));&#13;
&#13;
        response = request.Post(params.endpoint + data);&#13;
&#13;
        Zabbix.Log(4, '[ BrevisOne Webhook ] Received response with status code ' +&#13;
            request.Status() + '\n' + response);&#13;
&#13;
        if (request.Status() &lt; 200 || request.Status() &gt;= 300) {&#13;
            var message = 'Request failed with status code ' + request.Status();&#13;
&#13;
            if (response) {&#13;
                message += ': ' + response;&#13;
            }&#13;
&#13;
            throw message + '. Check debug log for more information.';&#13;
        }&#13;
&#13;
        return response;&#13;
    }&#13;
};&#13;
&#13;
try {&#13;
    var params = JSON.parse(value),&#13;
        data = '';&#13;
&#13;
    ['endpoint', 'password', 'username', 'text', 'send_to'].forEach(function (field) {&#13;
        if (typeof params !== 'object' || typeof params[field] === 'undefined'&#13;
                || params[field] === '' ) {&#13;
            throw 'Required parameter is not set: &quot;' + field + '&quot;.';&#13;
        }&#13;
    });&#13;
&#13;
    data += BrevisOne.addParam('?', 'username', params.username);&#13;
    data += BrevisOne.addParam('&amp;', 'password', params.password);&#13;
    data += BrevisOne.addParam('&amp;', 'text', params.text);&#13;
    BrevisOne.request(BrevisOne.setFields(data));&#13;
&#13;
    return 'OK';&#13;
}&#13;
catch (error) {&#13;
    Zabbix.Log(3, '[ BrevisOne Webhook ] ERROR: ' + error);&#13;
    throw 'Sending failed: ' + error;&#13;
}</script>
            <message_templates>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>[{EVENT.STATUS}] {EVENT.NAME}</subject>
                    <message>[{EVENT.STATUS}] {EVENT.NAME}&#13;
Started at {EVENT.TIME} on {EVENT.DATE}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Operational data: {EVENT.OPDATA}&#13;
Event info: {$ZABBIX.URL}/tr_events.php?triggerid={TRIGGER.ID}&amp;eventid={EVENT.ID}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>RECOVERY</operation_mode>
                    <subject>Resolved in {EVENT.DURATION}: {EVENT.NAME}</subject>
                    <message>[{EVENT.STATUS}] {EVENT.NAME}&#13;
Resoled in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Event info: {$ZABBIX.URL}/tr_events.php?triggerid={TRIGGER.ID}&amp;eventid={EVENT.ID}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>UPDATE</operation_mode>
                    <subject>[{EVENT.STATUS}] {EVENT.NAME}</subject>
                    <message>[{EVENT.STATUS}] {EVENT.NAME}&#13;
&#13;
{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&#13;
{EVENT.UPDATE.MESSAGE}</message>
                </message_template>
                <message_template>
                    <event_source>DISCOVERY</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}</subject>
                    <message>Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}&#13;
Discovery rule: {DISCOVERY.RULE.NAME}&#13;
&#13;
Device IP: {DISCOVERY.DEVICE.IPADDRESS}&#13;
Device DNS: {DISCOVERY.DEVICE.DNS}&#13;
Device status: {DISCOVERY.DEVICE.STATUS}&#13;
Device uptime: {DISCOVERY.DEVICE.UPTIME}&#13;
&#13;
Device service name: {DISCOVERY.SERVICE.NAME}&#13;
Device service port: {DISCOVERY.SERVICE.PORT}&#13;
Device service status: {DISCOVERY.SERVICE.STATUS}&#13;
Device service uptime: {DISCOVERY.SERVICE.UPTIME}</message>
                </message_template>
                <message_template>
                    <event_source>AUTOREGISTRATION</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Autoregistration: {HOST.HOST}</subject>
                    <message>Autoregistration: {HOST.HOST}&#13;
Host IP: {HOST.IP}&#13;
Agent port: {HOST.PORT}</message>
                </message_template>
            </message_templates>
        </media_type>
    </media_types>
</zabbix_export>
